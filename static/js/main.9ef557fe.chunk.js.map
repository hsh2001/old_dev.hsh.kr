{"version":3,"sources":["scss/components/IntroducePage.module.scss","serviceWorker.js","components/IntroducePage.tsx","components/App.tsx","components/Root.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","profileImage","Image","src","profileImageLoad","Promise","resolve","onload","ProfileImage","useEffect","then","image","canvas","document","getElementById","getContext","drawImage","width","height","id","className","style","IntroducePage","message","useState","opacity","setOpacity","addEventListener","scrollY","innerHeight","Math","max","introducePage","data-href","data-width","data-layout","data-action","data-size","data-share","App","setMessage","mainContent","setmainContent","a","loadCount","moduleLoads","length","forEach","load","all","BlinkView","default","ReversChangePage","AIOmokPage","CRIPage","frames","SkillPage","ContactPage","Footer","ScrollArrow","map","frame","promise","title","Root","StrictMode","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9ef557fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImage\":\"IntroducePage_profileImage__29Rak\",\"introducePage\":\"IntroducePage_introducePage__2c8PG\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport style from '../scss/components/IntroducePage.module.scss';\n\nconst profileImage = new Image();\nprofileImage.src = '/image/profile-image.jpg';\nexport const profileImageLoad: Promise<HTMLImageElement> = new Promise(\n  (resolve) => {\n    profileImage.onload = (): void => {\n      resolve(profileImage);\n    };\n  },\n);\n\nconst profileImageCanvasID = 'profile-image-canvas';\nconst ProfileImage: React.FC = () => {\n  useEffect(() => {\n    profileImageLoad.then((image) => {\n      const canvas = document.getElementById(\n        profileImageCanvasID,\n      ) as HTMLCanvasElement;\n\n      const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    });\n  }, []);\n\n  return (\n    <canvas\n      width={500}\n      height={500}\n      id={profileImageCanvasID}\n      className={style.profileImage}\n    />\n  );\n};\n\ninterface IntroducePageProps {\n  message: string;\n}\n\nconst IntroducePage: React.FC<IntroducePageProps> = ({\n  message = '',\n}: IntroducePageProps) => {\n  const [opacity, setOpacity] = useState(1);\n\n  useEffect(() => {\n    window.addEventListener('scroll', function handler() {\n      const { scrollY, innerHeight } = window;\n      setOpacity(Math.max(0, 1 - (scrollY * 2) / innerHeight));\n    });\n  }, []);\n\n  return (\n    <div className={style.introducePage} style={{ opacity }}>\n      <div>\n        <ProfileImage />\n        <h1>Hwang Seung-hyun</h1>\n        <p>{message}</p>\n        <br />\n        <div\n          className=\"fb-like\"\n          data-href=\"http://dev.hsh.kr\"\n          data-width=\"\"\n          data-layout=\"button_count\"\n          data-action=\"like\"\n          data-size=\"large\"\n          data-share=\"false\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default IntroducePage;\n","import React, { useState, useEffect } from 'react';\nimport IntroducePage, { profileImageLoad } from './IntroducePage';\n\nconst App: React.FC = () => {\n  const [message, setMessage] = useState('Loading... Please wait.');\n  const [mainContent, setmainContent] = useState(<></>);\n\n  useEffect(() => {\n    profileImageLoad.then(async () => {\n      let loadCount = 0;\n      const moduleLoads = [\n        import('./BlinkView'),\n        import('./ReversChangePage'),\n        import('./AIOmokPage'),\n        import('./CRIPage'),\n        import('./SkillPage'),\n        import('./ContactPage'),\n        import('./Footer'),\n        import('./ScrollArrow'),\n      ] as const;\n\n      setMessage(`Loading components... 0/${moduleLoads.length}`);\n\n      moduleLoads.forEach((load) => {\n        Promise.all([load]).then(() => {\n          loadCount++;\n          setMessage(\n            `Loading components... ${loadCount}/${moduleLoads.length}`,\n          );\n        });\n      });\n\n      const [\n        { default: BlinkView },\n        { default: ReversChangePage },\n        { default: AIOmokPage },\n        { default: CRIPage, frames },\n        { default: SkillPage },\n        { default: ContactPage },\n        { default: Footer },\n        { default: ScrollArrow },\n      ] = await Promise.all(moduleLoads);\n\n      loadCount = 0;\n      setMessage(`Loading images... ${loadCount}/${frames.length}`);\n      await Promise.all(\n        frames.map((frame) => {\n          return frame.promise.then(() => {\n            loadCount++;\n            setMessage(`Loading images... ${loadCount}/${frames.length}`);\n          });\n        }),\n      );\n\n      setmainContent(\n        <>\n          <ScrollArrow />\n          <BlinkView title=\"I am a Game Developer.\" />\n          <ReversChangePage />\n          <AIOmokPage />\n          <BlinkView title=\"I am a Web Developer.\" />\n          <CRIPage />\n          <SkillPage />\n          <hr />\n          <ContactPage />\n          <Footer />\n        </>,\n      );\n\n      setMessage(`The loading is done! Scroll down for more information.`);\n    });\n  }, []);\n\n  return (\n    <>\n      <IntroducePage message={message} />\n      {mainContent}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport App from './App';\n\nconst Root: React.FC = () => {\n  return (\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './components/Root';\nimport './scss/reset.scss';\nimport './scss/buy-me-a-coffee.scss';\nimport './scss/facebook.scss';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}